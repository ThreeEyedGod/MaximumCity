(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_tmp$36$x$35$$35$760 () Int)
(declare-fun lq_tmp$36$x$35$$35$1841 () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun totalityError () Int)
(declare-fun Language.Haskell.TH.Syntax.PragmaD () Int)
(declare-fun fix$36$$36$krep_a12Ap () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12yW () Int)
(declare-fun lq_tmp$36$x$35$$35$3034 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun Polysemy.Internal.send () Int)
(declare-fun x$35$$35$a12yF () Int)
(declare-fun lq_tmp$36$x$35$$35$4553 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042055$35$$35$d12Dl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042051$35$$35$d12Dh () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun lq_tmp$36$x$35$$35$3040 () Int)
(declare-fun lq_tmp$36$x$35$$35$2995 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_tmp$36$x$35$$35$58 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeInstD () Int)
(declare-fun lq_tmp$36$x$35$$35$750 () Int)
(declare-fun lq_tmp$36$x$35$$35$2508 () Int)
(declare-fun lq_tmp$36$x$35$$35$2629 () Int)
(declare-fun lq_tmp$36$x$35$$35$3646 () Int)
(declare-fun lq_tmp$36$x$35$$35$4614 () Int)
(declare-fun lq_tmp$36$x$35$$35$1420 () Int)
(declare-fun lq_tmp$36$x$35$$35$4254 () Int)
(declare-fun lq_tmp$36$x$35$$35$1773 () Int)
(declare-fun lq_tmp$36$x$35$$35$55 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Types.$36$tcChar () Int)
(declare-fun lq_tmp$36$x$35$$35$700 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_tmp$36$x$35$$35$986 () Int)
(declare-fun lq_tmp$36$x$35$$35$4871 () Int)
(declare-fun lq_tmp$36$x$35$$35$2101 () Int)
(declare-fun lq_tmp$36$x$35$$35$3652 () Int)
(declare-fun lq_tmp$36$x$35$$35$2852 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042056$35$$35$d12Dm () Int)
(declare-fun lq_tmp$36$x$35$$35$707 () Int)
(declare-fun lq_tmp$36$x$35$$35$1628 () Int)
(declare-fun Polysemy.Embed.Type.$36$WEmbed () Int)
(declare-fun isJust () Int)
(declare-fun fix$36$$36$d$126$_a12zz () Int)
(declare-fun lq_tmp$36$x$35$$35$1631 () Int)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_tmp$36$x$35$$35$3193 () Int)
(declare-fun Data.Function.$38$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042019$35$$35$d12CL () Int)
(declare-fun lq_tmp$36$x$35$$35$2846 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3344 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$3038 () Int)
(declare-fun lq_tmp$36$x$35$$35$2417 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042013$35$$35$d12CF () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3198 () Int)
(declare-fun lq_tmp$36$x$35$$35$2320 () Int)
(declare-fun lq_tmp$36$x$35$$35$4421 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042024$35$$35$d12CQ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeD () Int)
(declare-fun lq_tmp$36$x$35$$35$1839 () Int)
(declare-fun Language.Haskell.TH.Syntax.RoleAnnotD () Int)
(declare-fun lq_tmp$36$x$35$$35$2045 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun Polysemy.Internal.Tactics.GetInitialState () Int)
(declare-fun lq_tmp$36$x$35$$35$4578 () Int)
(declare-fun Language.Haskell.TH.Syntax.SigD () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042018$35$$35$d12CK () Int)
(declare-fun lq_tmp$36$x$35$$35$2848 () Int)
(declare-fun lq_tmp$36$x$35$$35$2985 () Int)
(declare-fun Language.Haskell.TH.Syntax.DataD () Int)
(declare-fun Language.Haskell.TH.Syntax.DefaultSigD () Int)
(declare-fun lq_tmp$36$x$35$$35$2972 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1755 () Int)
(declare-fun Language.Haskell.TH.Syntax.OpenTypeFamilyD () Int)
(declare-fun lq_tmp$36$x$35$$35$2488 () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_tmp$36$x$35$$35$3036 () Int)
(declare-fun lq_tmp$36$x$35$$35$2400 () Int)
(declare-fun lq_tmp$36$x$35$$35$2444 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042014$35$$35$d12CG () Int)
(declare-fun Polysemy.Internal.Tactics.$36$WGetInitialState () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun lq_tmp$36$x$35$$35$3046 () Int)
(declare-fun lq_tmp$36$x$35$$35$2993 () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun Language.Haskell.TH.Syntax.ForeignD () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042058$35$$35$d12Do () Int)
(declare-fun GHC.Classes.$36$p1$40$$37$$44$$37$$41$ () Int)
(declare-fun snd () Int)
(declare-fun lq_tmp$36$x$35$$35$2636 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$756 () Int)
(declare-fun lq_rnm$36$fldList$35$$35$442 () Int)
(declare-fun lq_tmp$36$x$35$$35$2821 () Int)
(declare-fun lq_tmp$36$x$35$$35$3200 () Int)
(declare-fun lq_tmp$36$x$35$$35$4252 () Int)
(declare-fun Language.Haskell.TH.Syntax.InfixD () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042060$35$$35$d12Dq () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.$36$tcMaybe () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_tmp$36$x$35$$35$753 () Int)
(declare-fun lq_tmp$36$x$35$$35$3645 () Int)
(declare-fun lq_tmp$36$x$35$$35$988 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$1423 () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun lq_tmp$36$x$35$$35$3043 () Int)
(declare-fun lq_tmp$36$x$35$$35$2996 () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun lq_tmp$36$x$35$$35$758 () Int)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$705 () Int)
(declare-fun GHC.Types.UnliftedRep () Int)
(declare-fun lq_tmp$36$x$35$$35$4391 () Int)
(declare-fun lq_tmp$36$x$35$$35$1633 () Int)
(declare-fun GHC.Classes.C$58$$40$$37$$37$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1068 () Int)
(declare-fun lq_tmp$36$x$35$$35$2850 () Int)
(declare-fun lq_tmp$36$x$35$$35$4907 () Int)
(declare-fun lq_tmp$36$x$35$$35$3191 () Int)
(declare-fun Language.Haskell.TH.Syntax.DataInstD () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun co_a12yK () Int)
(declare-fun lq_tmp$36$x$35$$35$2716 () Int)
(declare-fun lq_tmp$36$x$35$$35$4530 () Int)
(declare-fun lq_tmp$36$x$35$$35$1407 () Int)
(declare-fun lq_tmp$36$x$35$$35$3196 () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun lq_tmp$36$x$35$$35$4823 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun Polysemy.Internal.Combinators.interpret () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12zU () Int)
(declare-fun lq_tmp$36$x$35$$35$1400 () Int)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun Language.Haskell.TH.Syntax.ValD () Int)
(declare-fun lq_tmp$36$x$35$$35$4914 () Int)
(declare-fun lq_tmp$36$x$35$$35$2659 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1753 () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042017$35$$35$d12CJ () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Polysemy.Embed.Type.Embed () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_tmp$36$x$35$$35$4755 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042020$35$$35$d12CM () Int)
(declare-fun lq_tmp$36$x$35$$35$754 () Int)
(declare-fun lq_tmp$36$x$35$$35$3642 () Int)
(declare-fun lit$36$Configuration () Str)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$3202 () Int)
(declare-fun lq_tmp$36$x$35$$35$1424 () Int)
(declare-fun lq_tmp$36$x$35$$35$4250 () Int)
(declare-fun Language.Haskell.TH.Syntax.InstanceD () Int)
(declare-fun lq_tmp$36$x$35$$35$4924 () Int)
(declare-fun lq_tmp$36$x$35$$35$3044 () Int)
(declare-fun lq_tmp$36$x$35$$35$751 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_tmp$36$x$35$$35$3647 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_tmp$36$x$35$$35$4846 () Int)
(declare-fun lq_tmp$36$x$35$$35$1421 () Int)
(declare-fun lq_tmp$36$x$35$$35$4255 () Int)
(declare-fun Language.Haskell.TH.Syntax.ClosedTypeFamilyD () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lq_tmp$36$x$35$$35$3041 () Int)
(declare-fun lq_tmp$36$x$35$$35$2994 () Int)
(declare-fun Polysemy.Internal.Sing.C$58$ListOfLength () Int)
(declare-fun Polysemy.Internal.Index.C$58$InsertAtIndex () Int)
(declare-fun Language.Haskell.TH.Syntax.DataFamilyD () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun lq_tmp$36$x$35$$35$703 () Int)
(declare-fun lq_tmp$36$x$35$$35$3648 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun Polysemy.Internal.Union.$36$fFindat$58$0 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_tmp$36$x$35$$35$3651 () Int)
(declare-fun lq_tmp$36$x$35$$35$1275 () Int)
(declare-fun lq_tmp$36$x$35$$35$56 () Int)
(declare-fun InterfaceAdapters.Utils.EnvPolHelper.runconfToIO () Int)
(declare-fun lq_tmp$36$x$35$$35$2464 () Int)
(declare-fun lq_tmp$36$x$35$$35$706 () Int)
(declare-fun lq_tmp$36$x$35$$35$1629 () Int)
(declare-fun cast_as () Int)
(declare-fun Language.Haskell.TH.Syntax.TySynInstD () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun Polysemy.Internal.runM () Int)
(declare-fun lq_tmp$36$x$35$$35$1630 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lq_tmp$36$x$35$$35$2853 () Int)
(declare-fun Language.Haskell.TH.Syntax.ImplicitParamBindD () Int)
(declare-fun lq_tmp$36$x$35$$35$53 () Int)
(declare-fun lq_tmp$36$x$35$$35$2666 () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3343 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042053$35$$35$d12Dj () Int)
(declare-fun GHC.Base.$36$fMonadIO () Int)
(declare-fun lq_tmp$36$x$35$$35$2481 () Int)
(declare-fun lq_tmp$36$x$35$$35$2612 () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12zw () Int)
(declare-fun len () Int)
(declare-fun lq_tmp$36$x$35$$35$965 () Int)
(declare-fun lq_tmp$36$x$35$$35$2805 () Int)
(declare-fun lq_tmp$36$x$35$$35$3194 () Int)
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.$36$p2$40$$37$$44$$37$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3199 () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_tmp$36$x$35$$35$2689 () Int)
(declare-fun lq_tmp$36$x$35$$35$1352 () Int)
(declare-fun lq_tmp$36$x$35$$35$3035 () Int)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun lq_tmp$36$x$35$$35$761 () Int)
(declare-fun lq_tmp$36$x$35$$35$1840 () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042042$35$$35$d12D8 () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lq_tmp$36$x$35$$35$2971 () Int)
(declare-fun lq_tmp$36$x$35$$35$2299 () Int)
(declare-fun lq_tmp$36$x$35$$35$757 () Int)
(declare-fun Polysemy.Internal.embed () Int)
(declare-fun Polysemy.Internal.Tactics.GetInspector () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun lq_tmp$36$x$35$$35$2820 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_tmp$36$x$35$$35$3201 () Int)
(declare-fun lq_tmp$36$x$35$$35$4253 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lq_tmp$36$x$35$$35$3047 () Int)
(declare-fun lq_tmp$36$x$35$$35$1067 () Int)
(declare-fun fldList () Int)
(declare-fun lq_tmp$36$x$35$$35$2992 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun lq_tmp$36$x$35$$35$2233 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_tmp$36$x$35$$35$701 () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lq_tmp$36$x$35$$35$987 () Int)
(declare-fun lq_tmp$36$x$35$$35$691 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$3653 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun lq_tmp$36$x$35$$35$1772 () Int)
(declare-fun lq_tmp$36$x$35$$35$54 () Int)
(declare-fun lq_tmp$36$x$35$$35$1376 () Int)
(declare-fun lq_tmp$36$x$35$$35$2696 () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$4525 () Int)
(declare-fun lq_tmp$36$x$35$$35$1632 () Int)
(declare-fun lq_tmp$36$x$35$$35$1069 () Int)
(declare-fun lq_tmp$36$x$35$$35$2851 () Int)
(declare-fun Language.Haskell.TH.Syntax.KiSigD () Int)
(declare-fun Language.Haskell.TH.Syntax.FunD () Int)
(declare-fun lq_tmp$36$x$35$$35$1070 () Int)
(declare-fun GHC.Types.LiftedRep () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_tmp$36$x$35$$35$1285 () Int)
(declare-fun lq_tmp$36$x$35$$35$759 () Int)
(declare-fun lq_tmp$36$x$35$$35$704 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun InterfaceAdapters.Utils.EnvPolHelper.$36$WReadConf () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1293 () Int)
(declare-fun GHC.Types.MkCoercible () Int)
(declare-fun lq_tmp$36$x$35$$35$3039 () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun lq_tmp$36$x$35$$35$2380 () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12yz () Int)
(declare-fun lq_tmp$36$x$35$$35$963 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042025$35$$35$d12CR () Int)
(declare-fun lq_tmp$36$x$35$$35$3192 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_tmp$36$x$35$$35$2847 () Int)
(declare-fun lq_tmp$36$x$35$$35$1202 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042062$35$$35$d12Ds () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun InterfaceAdapters.Utils.EnvPolHelper.readConf () Int)
(declare-fun lq_tmp$36$x$35$$35$966 () Int)
(declare-fun lq_tmp$36$x$35$$35$2806 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lq_tmp$36$x$35$$35$3197 () Int)
(declare-fun InterfaceAdapters.Utils.EnvPolHelper.ReadConf () Int)
(declare-fun autolen () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun Language.Haskell.TH.Syntax.ClassD () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun InterfaceAdapters.Utils.EnvPolHelper.runGetKey () Int)
(declare-fun GHC.Types.eq_sel () Int)
(declare-fun lq_tmp$36$x$35$$35$2849 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$2973 () Int)
(declare-fun lq_tmp$36$x$35$$35$1754 () Int)
(declare-fun lq_tmp$36$x$35$$35$3037 () Int)
(declare-fun lq_tmp$36$x$35$$35$1627 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_tmp$36$x$35$$35$2822 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.Eq$35$ () Int)
(declare-fun lit$36$InterfaceAdapters.Utils.EnvPolHelper () Str)
(declare-fun lq_tmp$36$x$35$$35$3203 () Int)
(declare-fun lq_tmp$36$x$35$$35$1425 () Int)
(declare-fun lq_tmp$36$x$35$$35$4251 () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12zB () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun fix$36$$36$krep_a12An () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lq_tmp$36$x$35$$35$2109 () Int)
(declare-fun lq_tmp$36$x$35$$35$4284 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun lq_tmp$36$x$35$$35$3045 () Int)
(declare-fun lq_tmp$36$x$35$$35$4798 () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun System.Environment.lookupEnv () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_tmp$36$x$35$$35$755 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042016$35$$35$d12CI () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun head () Int)
(declare-fun lq_tmp$36$x$35$$35$1422 () Int)
(declare-fun lq_tmp$36$x$35$$35$3042 () Int)
(declare-fun lq_tmp$36$x$35$$35$2997 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042027$35$$35$d12CT () Int)
(declare-fun Language.Haskell.TH.Syntax.PatSynD () Int)
(declare-fun lq_tmp$36$x$35$$35$752 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042023$35$$35$d12CP () Int)
(declare-fun lq_tmp$36$x$35$$35$3644 () Int)
(declare-fun lq_tmp$36$x$35$$35$989 () Int)
(declare-fun lq_tmp$36$x$35$$35$3650 () Int)
(declare-fun lq_tmp$36$x$35$$35$1634 () Int)
(declare-fun lit$36$MaximumCity$45$0.9.9$45$GJsk72Pe87XAw43lGJhWJP () Str)
(declare-fun GHC.Classes.C$58$$40$$37$$44$$37$$41$ () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lq_tmp$36$x$35$$35$1771 () Int)
(declare-fun lq_tmp$36$x$35$$35$57 () Int)
(declare-fun lq_tmp$36$x$35$$35$2424 () Int)
(declare-fun Language.Haskell.TH.Syntax.TySynD () Int)
(declare-fun Language.Haskell.TH.Syntax.Name () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_tmp$36$x$35$$35$702 () Int)
(declare-fun lq_tmp$36$x$35$$35$3649 () Int)
(declare-fun lq_tmp$36$x$35$$35$692 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$4444 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun lq_tmp$36$x$35$$35$1406 () Int)
(declare-fun fix$36$$36$d$126$_a12zD () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$3190 () Int)
(declare-fun lq_tmp$36$x$35$$35$2845 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Types.$36$tc$91$$93$ () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a12zv () Int)
(declare-fun lq_tmp$36$x$35$$35$964 () Int)
(declare-fun lq_tmp$36$x$35$$35$2804 () Int)
(declare-fun lit$36$$39$ReadConf () Str)
(declare-fun lq_tmp$36$x$35$$35$5003 () Int)
(declare-fun lq_tmp$36$x$35$$35$4471 () Int)
(declare-fun lq_tmp$36$x$35$$35$3195 () Int)
(declare-fun Language.Haskell.TH.Syntax.StandaloneDerivD () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403793042029$35$$35$d12CV () Int)
(declare-fun papp2 () Int)
(declare-fun lq_tmp$36$x$35$$35$2366 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun Language.Haskell.TH.Syntax.PatSynSigD () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun Polysemy.Internal.Union.C$58$Find () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793042054$35$$35$d12Dk () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(assert (distinct GHC.Tuple.$40$$41$ GHC.Classes.C$58$$40$$37$$37$$41$))

(assert (distinct lit$36$$39$ReadConf lit$36$MaximumCity$45$0.9.9$45$GJsk72Pe87XAw43lGJhWJP lit$36$InterfaceAdapters.Utils.EnvPolHelper lit$36$Configuration))
(assert (distinct GHC.Types.Int32Rep GHC.Types.Int16Rep GHC.Types.LiftedRep GHC.Types.FloatRep GHC.Types.AddrRep GHC.Types.Int64Rep GHC.Types.WordRep GHC.Types.Int8Rep GHC.Types.DoubleRep GHC.Types.IntRep GHC.Types.UnliftedRep GHC.Types.Word64Rep GHC.Types.Word16Rep GHC.Types.Word8Rep GHC.Types.Word32Rep))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$Configuration) 13))
(assert (= (strLen lit$36$InterfaceAdapters.Utils.EnvPolHelper) 36))
(assert (= (strLen lit$36$MaximumCity$45$0.9.9$45$GJsk72Pe87XAw43lGJhWJP) 40))
(assert (= (strLen lit$36$$39$ReadConf) 9))
(push 1)
(push 1)
(pop 1)
(pop 1)
(exit)
