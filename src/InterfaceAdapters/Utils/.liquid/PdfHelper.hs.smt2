(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun papp7 () Int)
(declare-fun Pdf.Content.Processor.Span () Int)
(declare-fun lq_tmp$36$x$35$$35$810 () Int)
(declare-fun lq_tmp$36$x$35$$35$809 () Int)
(declare-fun lq_tmp$36$x$35$$35$643 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun totalityError () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726280$35$$35$d3UDe () Str)
(declare-fun VV$35$$35$F$35$$35$59 () Int)
(declare-fun Pdf.Document.FontDict.FontTrueType () Int)
(declare-fun Pdf.Core.Object.Null () Int)
(declare-fun Data.ByteString.Internal.$36$WPS () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun Data.HashMap.Internal.$36$WCollision () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun Pdf.Core.Object.S () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun Pdf.Document.Internal.Types.Pdf () Int)
(declare-fun lq_tmp$36$x$35$$35$1420 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726283$35$$35$d3UDh () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Int.I64$35$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun Pdf.Document.Document.documentCatalog () Int)
(declare-fun lq_tmp$36$x$35$$35$1271 () Int)
(declare-fun lq_tmp$36$x$35$$35$1387 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Pdf.Document.Catalog.catalogPageNode () Int)
(declare-fun tail () Int)
(declare-fun GHC.IO.Handle.Types.$36$WFileHandle () Int)
(declare-fun Data.ByteString.Lazy.Internal.Chunk () Int)
(declare-fun Pdf.Document.Pdf.fromBytes () Int)
(declare-fun lq_tmp$36$x$35$$35$976 () Int)
(declare-fun isJust () Int)
(declare-fun Data.ByteString.Lazy.toStrict () Int)
(declare-fun lq_tmp$36$x$35$$35$926 () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_tmp$36$x$35$$35$962 () Int)
(declare-fun doc$35$$35$a3UuA () Int)
(declare-fun GHC.Conc.Sync.ThreadId () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1166 () Int)
(declare-fun GHC.IO.Handle.Types.DuplexHandle () Int)
(declare-fun GHC.List.span () Int)
(declare-fun GHC.IO.Handle.Types.FileHandle () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun Data.Text.$36$fMonoidText () Int)
(declare-fun lq_tmp$36$x$35$$35$1208 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726292$35$$35$d3UDq () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun root$35$$35$a3UuJ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726285$35$$35$d3UDj () Int)
(declare-fun lq_tmp$36$x$35$$35$1315 () Int)
(declare-fun lq_tmp$36$x$35$$35$1250 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun Pdf.Document.Internal.Types.Info () Int)
(declare-fun lq_tmp$36$x$35$$35$1145 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun Pdf.Core.Object.Array () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Pdf.Core.Object.Stream () Int)
(declare-fun lq_tmp$36$x$35$$35$1541 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726293$35$$35$d3UDr () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun GHC.Base.pure () Int)
(declare-fun GHC.Base.$62$$62$$61$ () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun Pdf.Core.Name.Name () Int)
(declare-fun GHC.IO.MaskedUninterruptible () Int)
(declare-fun InterfaceAdapters.Utils.PdfHelper.$36$trModule () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Pdf.Document.FontDict.FontType1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1225 () Int)
(declare-fun lq_tmp$36$x$35$$35$1372 () Int)
(declare-fun lq_tmp$36$x$35$$35$1237 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726294$35$$35$d3UDs () Int)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$695 () Int)
(declare-fun lq_tmp$36$x$35$$35$875 () Int)
(declare-fun info$35$$35$a3UuC () Int)
(declare-fun GHC.Exception.Type.SomeException () Int)
(declare-fun lq_tmp$36$x$35$$35$1187 () Int)
(declare-fun GHC.IO.catch () Int)
(declare-fun lq_tmp$36$x$35$$35$1443 () Int)
(declare-fun Data.HashMap.Internal.Leaf () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun Pdf.Document.Internal.Types.FontDict () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun Data.Text.Internal.Text () Int)
(declare-fun Pdf.Document.Internal.Types.PageTreeNode () Int)
(declare-fun Data.ByteString.Internal.PS () Int)
(declare-fun lq_tmp$36$x$35$$35$1414 () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun Pdf.Document.Pdf.document () Int)
(declare-fun Pdf.Core.Object.Name () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun pn$35$$35$a3Uur () Int)
(declare-fun Pdf.Document.PageNode.pageNodeNKids () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_tmp$36$x$35$$35$1138 () Int)
(declare-fun Pdf.Document.Internal.Types.Page () Int)
(declare-fun lq_tmp$36$x$35$$35$1543 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Pdf.Document.Internal.Types.PageTreeLeaf () Int)
(declare-fun lq_tmp$36$x$35$$35$879 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun Pdf.Core.Object.Ref () Int)
(declare-fun GHC.Exception.Type.$36$fExceptionSomeException () Int)
(declare-fun Pdf.Document.Info.infoTitle () Int)
(declare-fun total$35$$35$a3UuF () Int)
(declare-fun Pdf.Content.FontInfo.FontInfoSimple () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun pageBeg$35$$35$a3UuH () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.List.break () Int)
(declare-fun Pdf.Document.FontDict.FontType3 () Int)
(declare-fun Pdf.Core.Object.R () Int)
(declare-fun lq_tmp$36$x$35$$35$620 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_tmp$36$x$35$$35$664 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.IO.MaskedInterruptible () Int)
(declare-fun Pdf.Document.PageNode.pageNodePageByNum () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726282$35$$35$d3UDg () Str)
(declare-fun lq_tmp$36$x$35$$35$696 () Int)
(declare-fun Pdf.Core.Types.Rectangle () Int)
(declare-fun cast_as () Int)
(declare-fun Data.Text.Internal.$36$WText () Int)
(declare-fun Network.HTTP.Conduit.simpleHttp () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726288$35$$35$d3UDm () Int)
(declare-fun GHC.List.head () Int)
(declare-fun Data.ByteString.Lazy.Internal.$36$WChunk () Int)
(declare-fun GHC.Base.$36$fApplicativeIO () Int)
(declare-fun Pdf.Core.File.File () Int)
(declare-fun lq_tmp$36$x$35$$35$1270 () Int)
(declare-fun page$35$$35$a3Uuu () Int)
(declare-fun cast_as_int () Int)
(declare-fun lit$36$MaximumCity$45$0.9.9$45$1cM3QmEFibB5uksrpD7U8M () Str)
(declare-fun Data.HashMap.Internal.$36$WLeaf () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Exts.fromListN () Int)
(declare-fun GHC.Base.$36$fMonadIO () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726290$35$$35$d3UDo () Bool)
(declare-fun Pdf.Content.FontInfo.FontInfoComposite () Int)
(declare-fun len () Int)
(declare-fun Data.HashMap.Internal.Full () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun Data.HashMap.Internal.Empty () Int)
(declare-fun Pdf.Document.Internal.Types.Catalog () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun Data.HashMap.Internal.Collision () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Pdf.Document.Page.pageExtractText () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun lq_tmp$36$x$35$$35$1316 () Int)
(declare-fun b$35$$35$a3Uut () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun fldList () Int)
(declare-fun Pdf.Core.Object.String () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.IO.Unmasked () Int)
(declare-fun ds_d3UDd () Int)
(declare-fun Data.ByteString.Lazy.Internal.Empty () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$666 () Int)
(declare-fun pdfByteString$35$$35$a3Uuy () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726306$35$$35$d3UDE () Int)
(declare-fun lq_tmp$36$x$35$$35$1174 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun InterfaceAdapters.Utils.PdfHelper.readPagesPdf () Int)
(declare-fun Data.Vector.Vector () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Pdf.Document.Internal.Types.Document () Int)
(declare-fun lq_tmp$36$x$35$$35$931 () Int)
(declare-fun Data.Vector.$36$WVector () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_tmp$36$x$35$$35$663 () Int)
(declare-fun lq_tmp$36$x$35$$35$975 () Int)
(declare-fun total$35$$35$a3UuK () Int)
(declare-fun Pdf.Document.Document.documentInfo () Int)
(declare-fun InterfaceAdapters.Utils.PdfHelper.getPdfAtThisURL () Int)
(declare-fun VV$35$$35$F$35$$35$60 () Int)
(declare-fun Pdf.Core.Object.Number () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Control.Monad.IO.Class.$36$fMonadIOIO () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726295$35$$35$d3UDt () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1293 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp () Bool)
(declare-fun fst () Int)
(declare-fun Pdf.Core.Object.Bool () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$958 () Int)
(declare-fun GHC.Base.mconcat () Int)
(declare-fun a$35$$35$a3Uus () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun nxt$35$$35$a3Uuw () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726284$35$$35$d3UDi () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Data.Text.$36$fIsStringText () Int)
(declare-fun lq_tmp$36$x$35$$35$1207 () Int)
(declare-fun autolen () Int)
(declare-fun lq_tmp$36$x$35$$35$1162 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun lq_tmp$36$x$35$$35$1243 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_tmp$36$x$35$$35$604 () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Base.return () Int)
(declare-fun lq_tmp$36$x$35$$35$1413 () Int)
(declare-fun Pdf.Document.Internal.Types.PageNode () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun txt$35$$35$a3Uuv () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726304$35$$35$d3UDC () Int)
(declare-fun GHC.Exts.$36$fIsList$91$$93$ () Int)
(declare-fun lq_tmp$36$x$35$$35$878 () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun VV$35$$35$F$35$$35$117 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Data.HashMap.Internal.$36$WFull () Int)
(declare-fun Data.HashMap.Internal.$36$WBitmapIndexed () Int)
(declare-fun InterfaceAdapters.Utils.PdfHelper.getPDFProperties () Int)
(declare-fun lq_tmp$36$x$35$$35$1542 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun head () Int)
(declare-fun lq_tmp$36$x$35$$35$1194 () Int)
(declare-fun Pdf.Document.FontDict.FontType0 () Int)
(declare-fun Pdf.Core.Object.Dict () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lit$36$InterfaceAdapters.Utils.PdfHelper () Str)
(declare-fun lq_karg$36$VV$35$$35$574$35$$35$k_$35$$35$575 () Int)
(declare-fun GHC.Types.D$35$ () Int)
(declare-fun maybe_info$35$$35$a3UuB () Int)
(declare-fun lq_tmp$36$x$35$$35$973 () Int)
(declare-fun lq_tmp$36$x$35$$35$1229 () Int)
(declare-fun lq_tmp$36$x$35$$35$1331 () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lq_tmp$36$x$35$$35$1180 () Int)
(declare-fun pageEnd$35$$35$a3UuI () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_tmp$36$x$35$$35$692 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_tmp$36$x$35$$35$665 () Int)
(declare-fun lq_tmp$36$x$35$$35$1291 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lq_tmp$36$x$35$$35$925 () Int)
(declare-fun lq_tmp$36$x$35$$35$677 () Int)
(declare-fun Data.HashMap.Internal.BitmapIndexed () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_tmp$36$x$35$$35$961 () Int)
(declare-fun lq_tmp$36$x$35$$35$806 () Int)
(declare-fun title$35$$35$a3UuL () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793726281$35$$35$d3UDf () Int)
(declare-fun InterfaceAdapters.Utils.PdfHelper.getPagesofPDFfromTo () Int)
(declare-fun Pdf.Document.FontDict.FontMMType1 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$1124 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_tmp$36$x$35$$35$1415 () Int)
(declare-fun Data.String.fromString () Int)
(declare-fun pdf$35$$35$a3Uuz () Int)
(declare-fun lq_tmp$36$x$35$$35$1257 () Int)
(declare-fun GHC.IO.Handle.Types.$36$WDuplexHandle () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun InterfaceAdapters.Utils.JSONHelper.exceptionHandler () Int)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$4 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$7 (Int Bool) Real)
(declare-fun apply$35$$35$24 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int Real) Real)
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$16 (Int Str) Bool)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$11 (Int Real) Bool)
(declare-fun apply$35$$35$18 (Int Str) Str)
(declare-fun apply$35$$35$19 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Real)
(declare-fun apply$35$$35$13 (Int Real) Str)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$15 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Real)
(declare-fun apply$35$$35$14 (Int Real) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int Str) Real)
(declare-fun apply$35$$35$3 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$10 (Int Real) Int)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$4 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$7 (Bool) Real)
(declare-fun coerce$35$$35$24 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$12 (Real) Real)
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$16 (Str) Bool)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$11 (Real) Bool)
(declare-fun coerce$35$$35$18 (Str) Str)
(declare-fun coerce$35$$35$19 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Real)
(declare-fun coerce$35$$35$13 (Real) Str)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$15 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Real)
(declare-fun coerce$35$$35$14 (Real) (_ BitVec 32))
(declare-fun coerce$35$$35$17 (Str) Real)
(declare-fun coerce$35$$35$3 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$10 (Real) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Real) Int)
(declare-fun smt_lambda$35$$35$24 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 (Real Real) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$16 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$11 (Real Bool) Int)
(declare-fun smt_lambda$35$$35$18 (Str Str) Int)
(declare-fun smt_lambda$35$$35$19 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Real) Int)
(declare-fun smt_lambda$35$$35$13 (Real Str) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$15 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Real) Int)
(declare-fun smt_lambda$35$$35$14 (Real (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 (Str Real) Int)
(declare-fun smt_lambda$35$$35$3 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$10 (Real Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$15 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Real)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Real)



(assert (distinct lit$36$InterfaceAdapters.Utils.PdfHelper lit$36$MaximumCity$45$0.9.9$45$1cM3QmEFibB5uksrpD7U8M))


(assert (distinct Pdf.Document.FontDict.FontMMType1 Pdf.Document.FontDict.FontType0 Pdf.Document.FontDict.FontType3 Pdf.Document.FontDict.FontType1 Pdf.Document.FontDict.FontTrueType))
(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))



(assert (distinct GHC.Types.False GHC.Types.True))
(assert (distinct GHC.IO.Unmasked GHC.IO.MaskedInterruptible GHC.IO.MaskedUninterruptible))



(assert (= (strLen lit$36$MaximumCity$45$0.9.9$45$1cM3QmEFibB5uksrpD7U8M) 40))
(assert (= (strLen lit$36$InterfaceAdapters.Utils.PdfHelper) 33))
(push 1)
(define-fun b$36$$35$$35$288 () Bool (and (= VV$35$$35$F$35$$35$59 lq_anf$36$$35$$35$7205759403793726294$35$$35$d3UDs) (= VV$35$$35$F$35$$35$59 (+ a$35$$35$a3Uus lq_anf$36$$35$$35$7205759403793726293$35$$35$d3UDr))))
(define-fun b$36$$35$$35$289 () Bool (and (= VV$35$$35$F$35$$35$60 lq_anf$36$$35$$35$7205759403793726294$35$$35$d3UDs) (= VV$35$$35$F$35$$35$60 (+ a$35$$35$a3Uus lq_anf$36$$35$$35$7205759403793726293$35$$35$d3UDr))))
(define-fun b$36$$35$$35$134 () Bool (= lq_anf$36$$35$$35$7205759403793726280$35$$35$d3UDe lit$36$MaximumCity$45$0.9.9$45$1cM3QmEFibB5uksrpD7U8M))
(define-fun b$36$$35$$35$136 () Bool (= lq_anf$36$$35$$35$7205759403793726282$35$$35$d3UDg lit$36$InterfaceAdapters.Utils.PdfHelper))
(define-fun b$36$$35$$35$168 () Bool (= lq_anf$36$$35$$35$7205759403793726290$35$$35$d3UDo (> a$35$$35$a3Uus b$35$$35$a3Uut)))
(define-fun b$36$$35$$35$169 () Bool (and (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp (> a$35$$35$a3Uus b$35$$35$a3Uut)) (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp lq_anf$36$$35$$35$7205759403793726290$35$$35$d3UDo)))
(define-fun b$36$$35$$35$170 () Bool (and (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp (> a$35$$35$a3Uus b$35$$35$a3Uut)) (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp lq_anf$36$$35$$35$7205759403793726290$35$$35$d3UDo)))
(define-fun b$36$$35$$35$171 () Bool (and (not lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp) (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp (> a$35$$35$a3Uus b$35$$35$a3Uut)) (= lq_anf$36$$35$$35$7205759403793726291$35$$35$d3UDp lq_anf$36$$35$$35$7205759403793726290$35$$35$d3UDo)))
(define-fun b$36$$35$$35$174 () Bool (= lq_anf$36$$35$$35$7205759403793726292$35$$35$d3UDq 1))
(define-fun b$36$$35$$35$175 () Bool (= lq_anf$36$$35$$35$7205759403793726293$35$$35$d3UDr lq_anf$36$$35$$35$7205759403793726292$35$$35$d3UDq))
(define-fun b$36$$35$$35$176 () Bool (= lq_anf$36$$35$$35$7205759403793726294$35$$35$d3UDs (+ a$35$$35$a3Uus lq_anf$36$$35$$35$7205759403793726293$35$$35$d3UDr)))
(define-fun b$36$$35$$35$90 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$93 () Bool GHC.Types.True)
(push 1)
(assert (and true b$36$$35$$35$134 b$36$$35$$35$136 b$36$$35$$35$90 b$36$$35$$35$93))
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(push 1)
(push 1)
(assert (and true b$36$$35$$35$288 b$36$$35$$35$168 b$36$$35$$35$169 b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$174 b$36$$35$$35$175 b$36$$35$$35$176 b$36$$35$$35$90 b$36$$35$$35$93))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$59 0)))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$289 b$36$$35$$35$168 b$36$$35$$35$169 b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$174 b$36$$35$$35$175 b$36$$35$$35$176 b$36$$35$$35$90 b$36$$35$$35$93))
(push 1)
(assert (not (< VV$35$$35$F$35$$35$60 a$35$$35$a3Uus)))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(exit)
