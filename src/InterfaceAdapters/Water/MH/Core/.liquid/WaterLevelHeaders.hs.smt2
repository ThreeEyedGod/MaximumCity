(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun papp7 () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.RevenueRegionHeader () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun Data.Attoparsec.Number.$36$WI () Int)
(declare-fun Data.ByteString.Internal.$36$WPS () Int)
(declare-fun Data.Attoparsec.Internal.Types.Done () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowJustSectionHeaders () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowRevenueRegionHeader () Int)
(declare-fun GHC.Float.$36$fShowDouble () Int)
(declare-fun GHC.Int.I64$35$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun Data.ByteString.Internal.$36$tcByteString () Int)
(declare-fun Data.Attoparsec.Number.I () Int)
(declare-fun GHC.Word.W32$35$ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.IO.Handle.Types.$36$WFileHandle () Int)
(declare-fun Data.ByteString.Lazy.Internal.Chunk () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.RegionEntry () Int)
(declare-fun Data.Time.Clock.Internal.UTCTime.UTCTime () Int)
(declare-fun Data.Fixed.MkFixed () Int)
(declare-fun Control.Applicative.WrapMonad () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.IO.Handle.Types.DuplexHandle () Int)
(declare-fun GHC.IO.Handle.Types.FileHandle () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowRegionWaterData () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Data.Time.Calendar.Week.Thursday () Int)
(declare-fun GHC.Show.$36$fShow$91$$93$ () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun GHC.Types.$36$tcDouble () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Show.showParen () Int)
(declare-fun Data.Time.Calendar.CalendarDiffDays.CalendarDiffDays () Int)
(declare-fun Data.Time.LocalTime.Internal.ZonedTime.ZonedTime () Int)
(declare-fun Data.Text.Internal.Text () Int)
(declare-fun Data.Time.LocalTime.Internal.TimeOfDay.TimeOfDay () Int)
(declare-fun Data.ByteString.Internal.PS () Int)
(declare-fun GHC.Show.showsPrec () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.Show.$36$dmshow () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowPage8Page9 () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.JustSectionHeaders () Int)
(declare-fun Data.Time.LocalTime.Internal.TimeZone.TimeZone () Int)
(declare-fun Data.Scientific.Scientific () Int)
(declare-fun GHC.Show.$36$fShowInt () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun Data.Time.Clock.Internal.UniversalTime.ModJulianDate () Int)
(declare-fun GHC.Types.True () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Foreign.C.Types.CChar () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun GHC.Show.showCommaSpace () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Ptr.Ptr () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.TotalProjectFooter () Int)
(declare-fun Data.Text.Internal.$36$WText () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun Data.ByteString.Lazy.Internal.$36$WChunk () Int)
(declare-fun Data.Time.Calendar.Week.Monday () Int)
(declare-fun cast_as_int () Int)
(declare-fun Data.Time.Calendar.Week.Tuesday () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.Page8Page9 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowPercentLiveStorage () Int)
(declare-fun Data.Time.Calendar.Week.Friday () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun Data.Time.Format.Locale.TimeLocale () Int)
(declare-fun Data.Functor.Const.Const () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.RegionWaterData () Int)
(declare-fun Data.Attoparsec.Number.D () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun Data.ByteString.Lazy.Internal.Empty () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Word.W16$35$ () Int)
(declare-fun Data.Time.LocalTime.Internal.CalendarDiffTime.CalendarDiffTime () Int)
(declare-fun Data.ByteString.Internal.$36$fShowByteString () Int)
(declare-fun GHC.Word.W64$35$ () Int)
(declare-fun Data.Time.Calendar.Days.ModifiedJulianDay () Int)
(declare-fun GHC.Show.$36$dmshowList () Int)
(declare-fun GHC.Types.$36$tcInt () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Data.Attoparsec.Number.$36$WD () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Show.showString () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun Data.Time.Clock.Internal.DiffTime.MkDiffTime () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.SectionHeaders () Int)
(declare-fun papp4 () Int)
(declare-fun Data.Time.Calendar.Week.Saturday () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun Data.Time.Calendar.Week.Wednesday () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.PercentLiveStorage () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun head () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowCategoryProjects () Int)
(declare-fun Data.Time.LocalTime.Internal.LocalTime.LocalTime () Int)
(declare-fun GHC.Types.D$35$ () Int)
(declare-fun Data.Time.Calendar.Week.Sunday () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun Control.Applicative.WrapArrow () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowSectionHeaders () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowTotalProjectFooter () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Types.$36$tc$91$$93$ () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.$36$fShowRegionEntry () Int)
(declare-fun InterfaceAdapters.Water.MH.Core.WaterLevelHeaders.CategoryProjects () Int)
(declare-fun Data.Attoparsec.Internal.Types.Fail () Int)
(declare-fun GHC.Types.False () Int)
(declare-fun Data.Scientific.$36$WScientific () Int)
(declare-fun Control.Applicative.ZipList () Int)
(declare-fun papp2 () Int)
(declare-fun Data.Time.Clock.Internal.NominalDiffTime.MkNominalDiffTime () Int)
(declare-fun GHC.IO.Handle.Types.$36$WDuplexHandle () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)

(assert (distinct GHC.Types.False GHC.Types.True))









(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))



(assert (distinct Data.Time.Calendar.Week.Sunday Data.Time.Calendar.Week.Wednesday Data.Time.Calendar.Week.Saturday Data.Time.Calendar.Week.Friday Data.Time.Calendar.Week.Tuesday Data.Time.Calendar.Week.Monday Data.Time.Calendar.Week.Thursday))



(push 1)
(push 1)
(pop 1)
(pop 1)
(exit)
