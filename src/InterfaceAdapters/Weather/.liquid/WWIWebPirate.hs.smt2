(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun lq_tmp$36$x$35$$35$3861 () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun totalityError () Int)
(declare-fun Data.ByteString.Internal.$36$WPS () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun InterfaceAdapters.Weather.Weather.getWeather () Int)
(declare-fun lq_tmp$36$x$35$$35$4281 () Int)
(declare-fun GHC.Types.Word32Rep () Int)
(declare-fun VV$35$$35$F$35$$35$34 () Str)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun Data.Text.Encoding.Error.DecodeError () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4393 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun VV$35$$35$F$35$$35$20 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Int.I64$35$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun GHC.IO.Handle.Types.$36$WFileHandle () Int)
(declare-fun Data.ByteString.Lazy.Internal.Chunk () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun Data.Aeson.Types.ToJSON.C$58$ToJSON () Int)
(declare-fun Polysemy.Embed.Type.$36$WEmbed () Int)
(declare-fun isJust () Int)
(declare-fun GHC.Types.Word8Rep () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.IO.Handle.Types.DuplexHandle () Int)
(declare-fun GHC.List.span () Int)
(declare-fun GHC.IO.Handle.Types.FileHandle () Int)
(declare-fun UseCases.AgricultureUseCase.C$58$UserInput () Int)
(declare-fun lq_tmp$36$x$35$$35$4073 () Int)
(declare-fun Data.Aeson.Key.Key () Int)
(declare-fun UseCases.WWI.$36$WSendBackMsg () Int)
(declare-fun GHC.Word.W8$35$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4393 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149742$35$$35$d1uEe () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun Data.Aeson.Types.Internal.$36$WBool () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 () Int)
(declare-fun Data.Aeson.Types.Internal.Object () Int)
(declare-fun lq_tmp$36$x$35$$35$3863 () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Types.Word16Rep () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Aeson.Types.Internal.$36$WNumber () Int)
(declare-fun GHC.Generics.C$58$Generic () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149743$35$$35$d1uEf () Int)
(declare-fun lq_tmp$36$x$35$$35$21 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_tmp$36$x$35$$35$4213 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Types.Word64Rep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149748$35$$35$d1uEk () Int)
(declare-fun fromJust () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.Types.UnliftedRep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149744$35$$35$d1uEg () Int)
(declare-fun lq_tmp$36$x$35$$35$4193 () Int)
(declare-fun lq_tmp$36$x$35$$35$3840 () Int)
(declare-fun Data.Aeson.Types.Internal.Array () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4393 () Int)
(declare-fun lq_tmp$36$x$35$$35$4762 () Int)
(declare-fun co_a1uC6 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun GHC.Types.IntRep () Int)
(declare-fun lq_tmp$36$x$35$$35$4068 () Int)
(declare-fun irred_a1uBZ () Int)
(declare-fun lq_tmp$36$x$35$$35$4071 () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun GHC.Types.DoubleRep () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun Polysemy.Internal.Combinators.interpret () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun Data.Text.Internal.Text () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8 () Int)
(declare-fun Data.ByteString.Internal.PS () Int)
(declare-fun GHC.Types.Int8Rep () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149739$35$$35$d1uEb () Str)
(declare-fun UseCases.WWI.UserAsk () Int)
(declare-fun lq_tmp$36$x$35$$35$3865 () Int)
(declare-fun lq_tmp$36$x$35$$35$4279 () Int)
(declare-fun GHC.Types.WordRep () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Polysemy.Embed.Type.Embed () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun Data.Aeson.Types.Internal.Bool () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4393 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$18 () Int)
(declare-fun Data.Aeson.Types.Internal.String () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_tmp$36$x$35$$35$4211 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lq_tmp$36$x$35$$35$4280 () Int)
(declare-fun x$35$$35$a1uC1 () Int)
(declare-fun Data.Maybe.maybe () Int)
(declare-fun lit$36$$47$Users$47$bumrap$47$Documents$47$Code$47$MaximumCity$47$src$47$InterfaceAdapters$47$Weather$47$WWIWebPirate.hs$58$44$58$30$45$84$124$lambda () Str)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$4195 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_tmp$36$x$35$$35$3846 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Data.Aeson.Types.FromJSON.C$58$FromJSON () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6 () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun cast_as () Int)
(declare-fun Data.Text.Internal.$36$WText () Int)
(declare-fun lq_tmp$36$x$35$$35$17 () Int)
(declare-fun GHC.List.head () Int)
(declare-fun Data.ByteString.Lazy.Internal.$36$WChunk () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$4074 () Int)
(declare-fun Data.Aeson.Types.Internal.$36$WObject () Int)
(declare-fun len () Int)
(declare-fun ds_d1uCE () Int)
(declare-fun UseCases.WWI.SendBackMsg () Int)
(declare-fun GHC.Types.Int64Rep () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Classes.$36$p2$40$$37$$44$$37$$41$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.AddrRep () Int)
(declare-fun lq_tmp$36$x$35$$35$4067 () Int)
(declare-fun lq_tmp$36$x$35$$35$3860 () Int)
(declare-fun papp6 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$4696 () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun InterfaceAdapters.Weather.WWIWebPirate.interfaceWebPirate () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun Polysemy.Internal.embed () Int)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_tmp$36$x$35$$35$20 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun fldList () Int)
(declare-fun lq_tmp$36$x$35$$35$4783 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun Data.ByteString.Lazy.Internal.Empty () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Types.FloatRep () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Data.Aeson.Types.Internal.$36$WArray () Int)
(declare-fun Data.Aeson.Types.Internal.Null () Int)
(declare-fun Web.Telegram.API.Bot.Data.Update () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 () Int)
(declare-fun GHC.Types.LiftedRep () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Types.MkCoercible () Int)
(declare-fun lq_tmp$36$x$35$$35$4072 () Int)
(declare-fun GHC.Types.VecRep () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149741$35$$35$d1uEd () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun InterfaceAdapters.Weather.WWIWebPirate.runWWIWebPirate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun UseCases.WWI.GetWeatherTown () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun lq_tmp$36$x$35$$35$3816 () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun autolen () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_karg$36$VV$35$$35$4392$35$$35$k_$35$$35$4393 () Int)
(declare-fun InterfaceAdapters.Preferences.Preferences () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4393 () Int)
(declare-fun lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 () Int)
(declare-fun lq_tmp$36$x$35$$35$3862 () Int)
(declare-fun GHC.Types.Int16Rep () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.eq_sel () Int)
(declare-fun Data.Aeson.Types.Internal.$36$WString () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun ds_d1uCP () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.Eq$35$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$22 () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149738$35$$35$d1uEa () Int)
(declare-fun lq_tmp$36$x$35$$35$19 () Int)
(declare-fun GHC.Types.SumRep () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun Data.Text.Encoding.Error.EncodeError () Int)
(declare-fun head () Int)
(declare-fun lit$36$InterfaceAdapters.Weather.WWIWebPirate () Str)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lq_tmp$36$x$35$$35$4212 () Int)
(declare-fun UseCases.WWI.$36$WGetWeatherTown () Int)
(declare-fun GHC.Classes.C$58$$40$$37$$44$$37$$41$ () Int)
(declare-fun lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4393 () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_tmp$36$x$35$$35$4194 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Data.Aeson.Types.Internal.Number () Int)
(declare-fun lq_tmp$36$x$35$$35$3847 () Int)
(declare-fun lq_tmp$36$x$35$$35$4069 () Int)
(declare-fun lq_tmp$36$x$35$$35$4070 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Types.TupleRep () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793149746$35$$35$d1uEi () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_rnm$36$x$35$$35$a1uC1$35$$35$251 () Int)
(declare-fun VV$35$$35$F$35$$35$4 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun ds_d1uCD () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun req$35$$35$a1uBd () Int)
(declare-fun lq_tmp$36$x$35$$35$3864 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 () Int)
(declare-fun Polysemy.Internal.Union.C$58$Find () Int)
(declare-fun fix$36$$36$d$40$$37$$44$$37$$41$_a1uBV () Int)
(declare-fun GHC.IO.Handle.Types.$36$WDuplexHandle () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Types.Int32Rep () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)


(assert (distinct lit$36$InterfaceAdapters.Weather.WWIWebPirate lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$$47$Users$47$bumrap$47$Documents$47$Code$47$MaximumCity$47$src$47$InterfaceAdapters$47$Weather$47$WWIWebPirate.hs$58$44$58$30$45$84$124$lambda lit$36$main))
(assert (distinct GHC.Types.Int32Rep GHC.Types.Int16Rep GHC.Types.LiftedRep GHC.Types.FloatRep GHC.Types.AddrRep GHC.Types.Int64Rep GHC.Types.WordRep GHC.Types.Int8Rep GHC.Types.DoubleRep GHC.Types.IntRep GHC.Types.UnliftedRep GHC.Types.Word64Rep GHC.Types.Word16Rep GHC.Types.Word8Rep GHC.Types.Word32Rep))

(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))

(assert (distinct GHC.Types.False GHC.Types.True))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$$47$Users$47$bumrap$47$Documents$47$Code$47$MaximumCity$47$src$47$InterfaceAdapters$47$Weather$47$WWIWebPirate.hs$58$44$58$30$45$84$124$lambda) 102))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$InterfaceAdapters.Weather.WWIWebPirate) 38))
(push 1)
(define-fun b$36$$35$$35$261 () Bool (= lq_anf$36$$35$$35$7205759403793149739$35$$35$d1uEb lit$36$$47$Users$47$bumrap$47$Documents$47$Code$47$MaximumCity$47$src$47$InterfaceAdapters$47$Weather$47$WWIWebPirate.hs$58$44$58$30$45$84$124$lambda))
(define-fun b$36$$35$$35$241 () Bool (= irred_a1uBZ lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6))
(define-fun b$36$$35$$35$338 () Bool (and (= VV$35$$35$F$35$$35$34 lit$36$$47$Users$47$bumrap$47$Documents$47$Code$47$MaximumCity$47$src$47$InterfaceAdapters$47$Weather$47$WWIWebPirate.hs$58$44$58$30$45$84$124$lambda) (= VV$35$$35$F$35$$35$34 lq_anf$36$$35$$35$7205759403793149739$35$$35$d1uEb)))
(define-fun b$36$$35$$35$245 () Bool (= lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8))
(define-fun b$36$$35$$35$246 () Bool (= lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8))
(define-fun b$36$$35$$35$185 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$188 () Bool GHC.Types.True)
(push 1)
(assert (and (or (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 Int) (lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 Int) (lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$4) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9) (exists ((VV$35$$35$F$35$$35$27 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$27) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 Int) (lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 Int) (lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$4) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9) (exists ((VV$35$$35$F$35$$35$20 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$20) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 Int) (lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 Int) (lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$4) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9) (exists ((VV$35$$35$F$35$$35$15 Int)) (and (= lq_karg$36$VV$35$$35$4706$35$$35$k_$35$$35$4707 VV$35$$35$F$35$$35$15) (= lq_karg$36$irred_a1uBZ$35$$35$k_$35$$35$4707 irred_a1uBZ) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149733$35$$35$d1uE5) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149734$35$$35$d1uE6) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149735$35$$35$d1uE7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149736$35$$35$d1uE8) (= lq_karg$36$lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9$35$$35$k_$35$$35$4707 lq_anf$36$$35$$35$7205759403793149737$35$$35$d1uE9)))))) b$36$$35$$35$241 b$36$$35$$35$245 b$36$$35$$35$246 b$36$$35$$35$185 b$36$$35$$35$188))
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(push 1)
(push 1)
(assert (and true (= lq_anf$36$$35$$35$7205759403793149738$35$$35$d1uEa ds_d1uCP) (and (= lq_anf$36$$35$$35$7205759403793149738$35$$35$d1uEa ds_d1uCP) (= lq_anf$36$$35$$35$7205759403793149738$35$$35$d1uEa (apply$35$$35$0 (as UseCases.WWI.SendBackMsg Int) lq_anf$36$$35$$35$7205759403793149743$35$$35$d1uEf))) b$36$$35$$35$261 b$36$$35$$35$241 b$36$$35$$35$338 b$36$$35$$35$245 b$36$$35$$35$246 (= lq_anf$36$$35$$35$7205759403793149738$35$$35$d1uEa ds_d1uCP) b$36$$35$$35$185 b$36$$35$$35$188))
(push 1)
(assert (not (apply$35$$35$9 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(exit)
