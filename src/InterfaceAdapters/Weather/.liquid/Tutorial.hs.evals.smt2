(set-option :auto-config false)
(set-option :model true)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_prj ((s LSet) (m Map)) Map ((_ map (ite (Bool Elt Elt) Elt)) s m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_to_set ((m Map)) LSet ((_ map (> (Elt Elt) Bool)) m ((as const (Array Elt Elt)) 0)))
(define-fun smt_map_max ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (> (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_min ((m1 Map) (m2 Map)) Map (lambda ((i Int)) (ite (< (select m1 i) (select m2 i)) (select m1 i) (select m2 i))))
(define-fun smt_map_shift ((n Int) (m Map)) Map (lambda ((i Int)) (select m (- i n))))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((GHC.Maybe.Maybe 1)) ((par (T0) (GHC.Maybe.Nothing (GHC.Maybe.Just (lqdc$35$$35$$36$select$35$$35$GHC.Maybe.Just$35$$35$1 T0))))))
(declare-fun papp7 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276592$35$$35$d21Ec () Int)
(declare-fun GHC.Enum.enumFromThenTo () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun InterfaceAdapters.Weather.Tutorial.size () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276596$35$$35$d21Eg () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276598$35$$35$d21Ei () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun tail () Int)
(declare-fun isJust () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_tmp$36$x$35$$35$805 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276591$35$$35$d21Eb () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276599$35$$35$d21Ej () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276595$35$$35$d21Ef () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun papp5 () Int)
(declare-fun snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_tmp$36$x$35$$35$783 () Int)
(declare-fun GHC.Base.pure () Int)
(declare-fun GHC.Base.$62$$62$$61$ () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lq_tmp$36$x$35$$35$753 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276593$35$$35$d21Ed () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Base.$58$$124$ () Int)
(declare-fun fromJust () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun Data.List.NonEmpty.head () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun sz () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun VV$35$$35$F$35$$35$2 () Int)
(declare-fun GHC.IO.throwIO () Int)
(declare-fun addrLen () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun papp3 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_tmp$36$x$35$$35$781 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun GHC.IO.Exception.$36$fExceptionIOException () Int)
(declare-fun GHC.Exts.toList () Int)
(declare-fun GHC.Utils.Misc.split () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.List.init () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun Data.Foldable.sum () Int)
(declare-fun GHC.List.break () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.IO.Exception.userError () Int)
(declare-fun n$35$$35$a21mY () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Exts.fromList () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276597$35$$35$d21Eh () Int)
(declare-fun GHC.Base.$36$fApplicativeIO () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Base.$36$fMonadIO () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun len () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276590$35$$35$d21Ea () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun a0$35$$35$a21mZ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_tmp$36$x$35$$35$816 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403793276594$35$$35$d21Ee () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun System.Environment.getEnv () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun liquid_internal_this () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun InterfaceAdapters.Weather.Tutorial.average () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_tmp$36$x$35$$35$759 () Int)
(declare-fun GHC.Types.isTrue$35$ () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun InterfaceAdapters.Weather.Tutorial.divide () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun fst () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$804 () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun GHC.Num.$36$fNumInt () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Data.List.NonEmpty.nonEmpty () Int)
(declare-fun autolen () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun GHC.List.take () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun Data.Foldable.$36$fFoldable$91$$93$ () Int)
(declare-fun GHC.Stack.Types.pushCallStack () Int)
(declare-fun GHC.Exts.$36$fIsList$91$$93$ () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun charX () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun head () Int)
(declare-fun InterfaceAdapters.Weather.Tutorial.test1 () Int)
(declare-fun InterfaceAdapters.Weather.Tutorial.impossible () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun lq_tmp$36$x$35$$35$737 () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Real.$36$fIntegralInt () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Enum.$36$fEnumInt () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lq_tmp$36$x$35$$35$765 () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun notEmpty () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$21 (Int (GHC.Maybe.Maybe Int)) Bool)
(declare-fun apply$35$$35$24 (Int (GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$4 (Int Int) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$23 (Int (GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (GHC.Maybe.Maybe Int)) Str)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$14 (Int Str) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$9 (Int Bool) (GHC.Maybe.Maybe Int))
(declare-fun apply$35$$35$20 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$21 ((GHC.Maybe.Maybe Int)) Bool)
(declare-fun coerce$35$$35$24 ((GHC.Maybe.Maybe Int)) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$4 (Int) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$23 ((GHC.Maybe.Maybe Int)) (_ BitVec 32))
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((GHC.Maybe.Maybe Int)) Str)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$14 (Str) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$9 (Bool) (GHC.Maybe.Maybe Int))
(declare-fun coerce$35$$35$20 ((GHC.Maybe.Maybe Int)) Int)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$21 ((GHC.Maybe.Maybe Int) Bool) Int)
(declare-fun smt_lambda$35$$35$24 ((GHC.Maybe.Maybe Int) (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$4 (Int (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$23 ((GHC.Maybe.Maybe Int) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((GHC.Maybe.Maybe Int) Str) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$14 (Str (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (GHC.Maybe.Maybe Int)) Int)
(declare-fun smt_lambda$35$$35$20 ((GHC.Maybe.Maybe Int) Int) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$2$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$3$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$4$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$5$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$6$35$$35$20 () (GHC.Maybe.Maybe Int))
(declare-fun lam_arg$35$$35$7$35$$35$20 () (GHC.Maybe.Maybe Int))


(assert (distinct GHC.Types.GT GHC.Types.EQ GHC.Types.LT))
(assert (distinct GHC.Types.False GHC.Types.True))
(push 1)
(push 1)
(assert (>= (apply$35$$35$0 (as len Int) lq_anf$36$$35$$35$7205759403793276599$35$$35$d21Ej) 0))
(assert (= lq_anf$36$$35$$35$7205759403793276594$35$$35$d21Ee lq_anf$36$$35$$35$7205759403793276593$35$$35$d21Ed))
(assert (= lq_anf$36$$35$$35$7205759403793276599$35$$35$d21Ej (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as GHC.Enum.enumFromThenTo Int) lq_anf$36$$35$$35$7205759403793276594$35$$35$d21Ee) lq_anf$36$$35$$35$7205759403793276597$35$$35$d21Eh) lq_anf$36$$35$$35$7205759403793276598$35$$35$d21Ei)))
(assert (= VV$35$$35$F$35$$35$2 (apply$35$$35$0 (as GHC.Exts.fromList Int) lq_anf$36$$35$$35$7205759403793276599$35$$35$d21Ej)))
(assert (= a0$35$$35$a21mZ (apply$35$$35$0 (as GHC.Exts.fromList Int) lq_anf$36$$35$$35$7205759403793276599$35$$35$d21Ej)))
(assert GHC.Types.True)
(assert (= lq_anf$36$$35$$35$7205759403793276590$35$$35$d21Ea (as GHC.Exts.$36$fIsList$91$$93$ Int)))
(assert (>= (apply$35$$35$0 (as len Int) a0$35$$35$a21mZ) 0))
(assert (> n$35$$35$a21mY 0))
(assert (= lq_anf$36$$35$$35$7205759403793276593$35$$35$d21Ed lq_anf$36$$35$$35$7205759403793276592$35$$35$d21Ec))
(assert (>= (apply$35$$35$0 (as len Int) VV$35$$35$F$35$$35$2) 0))
(assert (= lq_anf$36$$35$$35$7205759403793276592$35$$35$d21Ec 0))
(assert (= VV$35$$35$F$35$$35$2 a0$35$$35$a21mZ))
(assert (= lq_anf$36$$35$$35$7205759403793276595$35$$35$d21Ef 1))
(assert (= lq_anf$36$$35$$35$7205759403793276598$35$$35$d21Ei n$35$$35$a21mY))
(assert (= lq_anf$36$$35$$35$7205759403793276591$35$$35$d21Eb GHC.Enum.$36$fEnumInt))
(assert (not GHC.Types.False))
(assert (= lq_anf$36$$35$$35$7205759403793276597$35$$35$d21Eh lq_anf$36$$35$$35$7205759403793276596$35$$35$d21Eg))
(assert (= lq_anf$36$$35$$35$7205759403793276596$35$$35$d21Eg lq_anf$36$$35$$35$7205759403793276595$35$$35$d21Ef))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(assert true)
(pop 1)
